@page "/search"

@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject IndexedDBManager DbManager
@inject DbStore DbStore

@using ChineseDictionary.Models
@using System.ComponentModel.DataAnnotations
@using TG.Blazor.IndexedDB
@using ChineseDictionary.Constants

<h1>@localization.Search</h1>

<EditForm Model="@fieldModel" OnValidSubmit="HandleSearchSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="SearchString" @bind-Value="fieldModel.SearchString" />

    <button type="submit" class="btn btn-success">@localization.Search</button>
</EditForm>

@if (words == null)
{
    <p><em>@localization.Loading</em></p>
}
else
{
    @foreach (var word in words.Take(shownItems))
    {
        <p>
            <h4><a href="search/@word.Chinese">@word.Chinese</a></h4><h5>@word.Pinyin</h5> <br />
            <em>@string.Join(", ", word.Translations)</em>
        </p>
    }
    <button type="button" class="btn btn-primary"@onclick="AddMore">@localization.More</button>
}

@code {
    private InputFieldModel fieldModel = new InputFieldModel();
    private Strings localization = new Strings();
    private int shownItems = ConfigConstants.FirstShownWordsCount;
    private int storageSize = ConfigConstants.StorageWordsSize;
    private IEnumerable<Word> words;

    protected override async Task OnInitializedAsync()
    {
        localization = await I18nText.GetTextTableAsync<Strings>(this);
        words = await Dictionary.SearchAsync("", 0, ConfigConstants.StorageWordsSize);

    }

    private async Task HandleSearchSubmit()
    {
        shownItems = ConfigConstants.FirstShownWordsCount;
        words = await Dictionary.SearchAsync(fieldModel.SearchString, 0, ConfigConstants.StorageWordsSize);
    }

    public async Task AddMore()
    {
        shownItems += ConfigConstants.AddShownWordsCount;

        if (shownItems > storageSize)
        {
            string query = fieldModel.SearchString ?? string.Empty;
            var data = await Dictionary.SearchAsync(query, storageSize, storageSize + ConfigConstants.StorageWordsSize);
            storageSize += ConfigConstants.StorageWordsSize;
            words = words.ToList().Concat(data);
        }
    }
}