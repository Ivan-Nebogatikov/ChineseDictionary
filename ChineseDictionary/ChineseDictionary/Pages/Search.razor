@page "/search"
@using ChineseDictionary.Models
@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary

@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject DbStore DbStore

@using ChineseDictionary.Constants

<h1>Search</h1>

<EditForm Model="@fieldModel" OnValidSubmit="HandleSearchSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="SearchString" @bind-Value="fieldModel.SearchString" />

    <button type="submit">Search</button>
</EditForm>

@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var word in words.Take(shownItems))
    {
        <p>
            <h4><a href="search/@word.Chinese">@word.Chinese</a></h4><h5>@word.Pinyin</h5> <br />
            <em>@string.Join(", ", word.Translations)</em>
        </p>
    }
    <button @onclick="AddMore">More</button>
}

@code {

    private InputFieldModel fieldModel = new InputFieldModel();

    private int shownItems = ConfigConstants.FirstShownWordsCount;
    private int storageSize = ConfigConstants.StorageWordsSize;

    private IEnumerable<Word> words;

    protected override async Task OnInitializedAsync()
    {
        words = await Dictionary.SearchAsync("", 0, ConfigConstants.StorageWordsSize);
    }

    private async Task HandleSearchSubmit()
    {
        shownItems = ConfigConstants.FirstShownWordsCount;
        words = await Dictionary.SearchAsync(fieldModel.SearchString, 0, ConfigConstants.StorageWordsSize);
    }

    public async Task AddMore()
    {
        shownItems += ConfigConstants.AddShownWordsCount;

        if(shownItems > storageSize)
        {
            string query = fieldModel.SearchString ?? string.Empty;
            var data = await Dictionary.SearchAsync(query, storageSize, storageSize + ConfigConstants.StorageWordsSize);
            storageSize += ConfigConstants.StorageWordsSize;
            words = words.ToList().Concat(data);
        }
    }
}
