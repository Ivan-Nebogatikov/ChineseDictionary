@page "/search"
@using ChineseDictionary.Models
@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary
<<<<<<< HEAD
@using System.IO
||||||| merged common ancestors
||||||||| 95dae23
@inject ChineseDictionary.Services.IDictionaryService Dictionary
=========
@inject ChineseDictionary.Services.IDictionaryService Dictionary
@using System.IO
>>>>>>>>> Temporary merge branch 2

=======

>>>>>>> 53190ab6f9ab6731b1e2925086fb003c19094e29
@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject DbStore DbStore

<h1>Search</h1>

<EditForm Model="@fieldModel" OnValidSubmit="HandleSearchSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="SearchString" @bind-Value="fieldModel.SearchString" />

    <button type="submit">Search</button>
</EditForm>

@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var word in words)
    {
        <p>
            <h4><a href="search/@word.Chinese">@word.Chinese</a></h4><h5>@word.Pinyin</h5> <br />
            <em>@string.Join(", ", word.Translations)</em>
        </p>
    }
    <button @onclick="AddMore">More</button>
}

@code {

    private InputFieldModel fieldModel = new InputFieldModel();

    private int shownItems = 20;

    private IEnumerable<Word> words;

    protected override async Task OnInitializedAsync()
    {
<<<<<<< HEAD
<<<<<<< HEAD
        words = Dictionary.SearchByChinese("", 0, shownItems);
        var response = await Http.GetAsync("https://raw.githubusercontent.com/Oleg42-prog/Lanit-CD/master/short.txt");
        var code = response.StatusCode;
        using (StreamReader sr = new StreamReader(await response.Content.ReadAsStreamAsync(), System.Text.Encoding.Unicode))
        {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                Console.WriteLine(line);
            }
        }

        words = await Dictionary.SearchByChineseAsync("", 0, shownItems);
||||||| merged common ancestors
<<<<<<<<< Temporary merge branch 1
        words = await Dictionary.SearchByChineseAsync("", 0, shownItems);
||||||||| 95dae23
        words = Dictionary.SearchByChinese("", 0, shownItems);

        //Some code to show how to work with Indexed DB
        //var z = (await DbManager.GetRecords<Word>("Dictionary")).ToList();
        //if (!z.Any())
        //{
        //    for (int i = 0; i < 1600; ++i)
        //    {
        //        await DbManager.AddRecord<Word>(new StoreRecord<Word> { Storename = ChineseDictionary.Constants.DbConstants.StoreName, Data = new Word { Chinese = "你好", Pinyin = "nǐ hǎo", Translations = new List<string> { "привет", "здравствуй" } } });
        //        await DbManager.AddRecord<Word>(new StoreRecord<Word> { Storename = ChineseDictionary.Constants.DbConstants.StoreName, Data = new Word { Chinese = "你好吗", Pinyin = "nǐ hǎo", Translations = new List<string> { "привет", "здравствуй" } } });
        //        await DbManager.AddRecord<Word>(new StoreRecord<Word> { Storename = ChineseDictionary.Constants.DbConstants.StoreName, Data = new Word { Chinese = "你好妈妈", Pinyin = "nǐ hǎo", Translations = new List<string> { "привет", "здравствуй" } } });
        //    }
        //}
        //words = (await DbManager.GetAllRecordsByIndexContains<Word>(new StoreIndexQueryStringContains { Storename = ChineseDictionary.Constants.DbConstants.StoreName, IndexName = ChineseDictionary.Constants.DbConstants.Chinese, QueryValue = "你" })).Take(20).ToList();
=========
        words = Dictionary.SearchByChinese("", 0, shownItems);
        var response = await Http.GetAsync("https://raw.githubusercontent.com/Oleg42-prog/Lanit-CD/master/short.txt");
        var code = response.StatusCode;
        using (StreamReader sr = new StreamReader(await response.Content.ReadAsStreamAsync(), System.Text.Encoding.Unicode))
        {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                Console.WriteLine(line);
            }
        }

        //Some code to show how to work with Indexed DB
        //var z = (await DbManager.GetRecords<Word>("Dictionary")).ToList();
        //if (!z.Any())
        //{
        //    for (int i = 0; i < 1600; ++i)
        //    {
        //        await DbManager.AddRecord<Word>(new StoreRecord<Word> { Storename = ChineseDictionary.Constants.DbConstants.StoreName, Data = new Word { Chinese = "你好", Pinyin = "nǐ hǎo", Translations = new List<string> { "привет", "здравствуй" } } });
        //        await DbManager.AddRecord<Word>(new StoreRecord<Word> { Storename = ChineseDictionary.Constants.DbConstants.StoreName, Data = new Word { Chinese = "你好吗", Pinyin = "nǐ hǎo", Translations = new List<string> { "привет", "здравствуй" } } });
        //        await DbManager.AddRecord<Word>(new StoreRecord<Word> { Storename = ChineseDictionary.Constants.DbConstants.StoreName, Data = new Word { Chinese = "你好妈妈", Pinyin = "nǐ hǎo", Translations = new List<string> { "привет", "здравствуй" } } });
        //    }
        //}
        //words = (await DbManager.GetAllRecordsByIndexContains<Word>(new StoreIndexQueryStringContains { Storename = ChineseDictionary.Constants.DbConstants.StoreName, IndexName = ChineseDictionary.Constants.DbConstants.Chinese, QueryValue = "你" })).Take(20).ToList();
>>>>>>>>> Temporary merge branch 2
=======
        words = await Dictionary.SearchByChineseAsync("", 0, shownItems);
>>>>>>> 53190ab6f9ab6731b1e2925086fb003c19094e29
    }

    private async Task HandleSearchSubmit()
    {
        words = await Dictionary.SearchByChineseAsync(fieldModel.SearchString, 0, shownItems);
    }

    public async Task AddMore()
    {
        shownItems += 20;
        string query = fieldModel.SearchString ?? string.Empty;
        var data = await Dictionary.SearchByChineseAsync(query, shownItems - 20, shownItems);
        words = words.ToList().Concat(data);
    }
}
