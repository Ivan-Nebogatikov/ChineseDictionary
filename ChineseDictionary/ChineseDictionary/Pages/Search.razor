@page "/search"
@using ChineseDictionary.Models
@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary

@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject DbStore DbStore

<h1>Search</h1>

<EditForm Model="@fieldModel" OnValidSubmit="HandleSearchSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="SearchString" @bind-Value="fieldModel.SearchString" />

    <button type="submit">Search</button>
</EditForm>

@if (words == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var word in words)
    {
        <p>
            <h4><a href="/search/@word.Chinese">@word.Chinese</a></h4><h5>@word.Pinyin</h5> <br />
            <em>@string.Join(", ", word.Translations)</em>
        </p>
    }
    <button @onclick="AddMore">More</button>
}

@code {

    private InputFieldModel fieldModel = new InputFieldModel();

    private int shownItems = 20;

    private IEnumerable<Word> words;

    protected override async Task OnInitializedAsync()
    {
        words = await Dictionary.SearchByChineseAsync("", 0, shownItems);
    }

    private async Task HandleSearchSubmit()
    {
        words = await Dictionary.SearchByChineseAsync(fieldModel.SearchString, 0, shownItems);
    }

    public async Task AddMore()
    {
        shownItems += 20;
        string q = fieldModel.SearchString != null ? fieldModel.SearchString : "";
        var data = await Dictionary.SearchByChineseAsync(q, shownItems - 20, shownItems);
        words = words.ToList().Concat(data);
    }
}
