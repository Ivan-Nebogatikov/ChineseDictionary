@page "/search"
@page "/canvas"

@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject IndexedDBManager DbManager
@inject DbStore DbStore
@inject IJSRuntime JsRuntime
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

@using ChineseDictionary.Models
@using TG.Blazor.IndexedDB
@using ChineseDictionary.Constants
@using HandwritingLibrary;
@using System;
@using System.Collections.Generic;
@using Newtonsoft.Json.Linq;

<h1 style="margin-bottom:70px">@localization.Search</h1>

<EditForm Model="@fieldModel" OnValidSubmit="HandleSearchSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="SearchString" style="margin-bottom:15px" @bind-Value="fieldModel.SearchString"/> 

    <button type="submit" class="btn btn-success">@localization.Search</button>
</EditForm>

<div>
    @if (characters != null)
    {
        @foreach (char ch in characters)
        {
            string hier = ch.ToString();
            <button class="button-char btn-warning button-char" @onclick="AddHierToSearchStr">@hier</button>

            async Task AddHierToSearchStr()
            {
                fieldModel.SearchString = fieldModel.SearchString + hier;
                ClearCanvas();
                characters = null;
            }
        }
    }
    else
    {
        @for (var i = 0; i < 9; ++i)
        {
            <button class="button-char btn-warning button-char"> </button>
        }
    }
</div>
<div>
    <canvas id="canvas"
            height="@windowSize.Height"
            width="@windowSize.Width"
            style="border: 2px solid"
            @onmousedown="@StartPaintMouse"
            @onmousemove="@PaintMouse"
            @onmouseup="@StopPaint"
            @onmouseout="@StopPaint"
            @ref="@canvas"
            @ontouchstart="@StartPaintTouch"
            @ontouchmove="@PaintTouch"
            @ontouchend="@StopPaint" />
</div>
<div class="text-left">
    <button style="float:left; margin-bottom:70px" type="button" class="btn btn-danger btn-xs d-block mx-auto"
            @onclick="ClearCanvas">
        @localization.Clear
    </button>
</div>

@if (words == null)
{
    <p><em>@localization.Loading</em></p>
}
else
{
    @foreach (var word in words.Take(shownItems))
    {
        <p style="margin-top:45px">
            <h4><a href="search/@word.Chinese">@word.Chinese</a></h4><h5>@word.Pinyin</h5> <br/>
            <em>@string.Join(", ", word.Translations)</em>
        </p>
    }
    <button type="button" class="btn btn-primary" @onclick="AddMore">@localization.More</button>
}

@code {
    private InputFieldModel fieldModel = new InputFieldModel();
    private Strings localization = new Strings();
    private int shownItems = ConfigConstants.FirstShownWordsCount;
    private int storageSize = ConfigConstants.StorageWordsSize;
    private IEnumerable<Word> words;

    List<Stroke> strokes = new List<Stroke>();
    WindowSize windowSize = new WindowSize();
    ElementReference canvas;
    Canvas2DContext ctx;
    static JObject dictionary;
    char[] characters;
    bool isPainting = false;
    double x;
    double y;
    
    protected override async Task OnInitializedAsync()
    {
        localization = await I18nText.GetTextTableAsync<Strings>(this);
        words = await Dictionary.SearchAsync("", 0, ConfigConstants.StorageWordsSize);
        windowSize = await JsRuntime.InvokeAsync<WindowSize>("getWindowSize");
        int SIZE = 240;
        if (windowSize.Width > 240)
        {
            windowSize.Height = SIZE;
            windowSize.Width = SIZE;
        }
        else
        {
            windowSize.Width = (int)(windowSize.Width * 0.9);
            windowSize.Height = windowSize.Width;
        }
        if (dictionary == null)
        {
            dictionary = JObject.Parse(await Http.GetStringAsync("orig.json"));
            dictionary["substrokes"] = CompactDecoder.Decode(dictionary["substrokes"].ToString());
        }
    }

    private void StartPaintMouse(MouseEventArgs e)
    {
        StartPainting(e.ClientX, e.ClientY);
    }

    private async Task PaintMouse(MouseEventArgs e)
    {
        await Paint(e.ClientX, e.ClientY);
    }

    private void StartPaintTouch(TouchEventArgs e)
    {
        StartPainting(e.Touches.First().ClientX, e.Touches.First().ClientY);
    }

    private async Task Paint(double pointX, double pointY)
    {
        if (isPainting)
        {
            var eX = pointX;
            var eY = pointY;
            if (ctx == null)
            {
                ctx = new Canvas2DContext(JsRuntime, canvas);
            }
            await ctx.DrawLine(x, y, eX, eY);
            x = eX;
            y = eY;
            strokes.Last().Points.Add(new Point { X = x, Y = y });
        }
    }

    private void StartPainting(double pointX, double pointY)
    {
        x = pointX;
        y = pointY;
        if (ctx == null)
        {
            ctx = new Canvas2DContext(JsRuntime, canvas);
        }
        isPainting = true;
        strokes.Add(new Stroke());
    }

    private async Task PaintTouch(TouchEventArgs e)
    {
        await Paint(e.Touches.First().ClientX, e.Touches.First().ClientY);
    }

    private void StopPaint()
    {
        if (isPainting)
        {
            var analyzer = new Analyzer(strokes);
            var subStrokes = analyzer.AnalyzedStrokes;
            var strokesCount = strokes.Count;
            var subStrokesCount = subStrokes.Count;
            int limit = 10;

            Console.WriteLine("Number of the input character's strokes: " + strokesCount);
            Console.WriteLine("Number of the input character's substrokes: " + subStrokesCount);

            Matcher mt = new Matcher(strokesCount, subStrokesCount, subStrokes, limit);
            characters = mt.DoMatching(dictionary);
        }
        isPainting = false;
    }

    public async Task ClearCanvas()
    {
        await JsRuntime.InvokeAsync<object>("__blazorCanvasInterop.clearCanvas", canvas);
        characters = null;
        strokes.Clear();
    }

    private async Task HandleSearchSubmit()
    {
        shownItems = ConfigConstants.FirstShownWordsCount;
        words = await Dictionary.SearchAsync(fieldModel.SearchString, 0, ConfigConstants.StorageWordsSize);
    }

    public async Task AddMore()
    {
        shownItems += ConfigConstants.AddShownWordsCount;

        if (shownItems > storageSize)
        {
            string query = fieldModel.SearchString ?? string.Empty;
            var data = await Dictionary.SearchAsync(query, storageSize, storageSize + ConfigConstants.StorageWordsSize);
            storageSize += ConfigConstants.StorageWordsSize;
            words = words.ToList().Concat(data);
        }
    }
}