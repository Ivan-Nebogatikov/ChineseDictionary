@page "/canvas"
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<canvas id="canvas"
        height="@windowSize.Height"
        width="@windowSize.Width"
        style="border: 2px solid "
        @onmousedown="@StartPaintMouse"
        @onmousemove="@PaintMouse"
        @onmouseup="@StopPaint"
        @onmouseout="@StopPaint"
        @ref="@canvas"
        @ontouchstart="@StartPaintTouch"
        @ontouchmove="@PaintTouch"
        @ontouchend="@StopPaint" />
<button type="button" class="btn btn-primary"
        @onclick="ClearCanvas">
    Очистить
</button>

@using HandwritingLibrary;
@using Newtonsoft.Json;
@using System;
@using System.Collections.Generic;
@using System.IO;
@using Newtonsoft.Json.Linq;

@code {
    List<Stroke> strokes = new List<Stroke>();
    WindowSize windowSize = new WindowSize();
    ElementReference canvas;
    Canvas2DContext ctx;
    JObject dictionary;
    bool isPainting = false;
    double x;
    double y;

    protected override async Task OnInitializedAsync()
    {
        windowSize = await JsRuntime.InvokeAsync<WindowSize>("getWindowSize");
        int SIZE = 500;
        if (windowSize.Width > 500)
        {
            windowSize.Height = SIZE;
            windowSize.Width = SIZE;
        }
        else
        {
            windowSize.Width = (int)(windowSize.Width * 0.9);
            windowSize.Height = windowSize.Width;
        }
        dictionary = JObject.Parse(await Http.GetStringAsync("orig.json"));
        dictionary["substrokes"] = CompactDecoder.Decode(dictionary["substrokes"].ToString());
    }

    private void StartPaintMouse(MouseEventArgs e)
    {
        StartPainting(e.ClientX, e.ClientY);

    }

    private async Task PaintMouse(MouseEventArgs e)
    {
        await Paint(e.ClientX, e.ClientY);

    }

    private void StartPaintTouch(TouchEventArgs e)
    {
        StartPainting(e.Touches.First().ClientX, e.Touches.First().ClientY);
    }

    private async Task Paint(double pointX, double pointY)
    {
        if (isPainting)
        {
            var eX = pointX;
            var eY = pointY;
            if (ctx == null)
            {
                ctx = new Canvas2DContext(JsRuntime, canvas);
            }
            await ctx.DrawLine(x, y, eX, eY);
            x = eX;
            y = eY;
            strokes.Last().Points.Add(new Point { X = x, Y = y });
        }
    }

    private void StartPainting(double pointX, double pointY)
    {
        x = pointX;
        y = pointY;
        if (ctx == null)
        {
            ctx = new Canvas2DContext(JsRuntime, canvas);
        }
        isPainting = true;
        strokes.Add(new Stroke());
    }

    public async Task PaintTouch(TouchEventArgs e)
    {
        await Paint(e.Touches.First().ClientX, e.Touches.First().ClientY);

    }

    private void StopPaint()
    {
        isPainting = false;
        var analyzer = new Analyzer(strokes);
        var subStrokes = analyzer.AnalyzedStrokes;
        var strokesCount = strokes.Count;
        var subStrokesCount = subStrokes.Count;
        int limit = 20;

        Console.WriteLine("Number of the input character's strokes: " + strokesCount);
        Console.WriteLine("Number of the input character's substrokes: " + subStrokesCount);

        Matcher mt = new Matcher(strokesCount, subStrokesCount, subStrokes, limit);
        mt.DoMatching(dictionary);


    }

    public async Task ClearCanvas()
    {
        await JsRuntime.InvokeAsync<object>("__blazorCanvasInterop.clearCanvas", canvas);
    }
}