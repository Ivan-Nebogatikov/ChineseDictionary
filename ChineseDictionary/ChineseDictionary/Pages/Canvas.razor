@page "/canvas"
@inject IJSRuntime JsRuntime





<canvas  height="@windowSize.Height"
        width="@windowSize.Width"
        style="border: 2px solid "
        @onmousedown="@StartPaintMouse"
        @onmousemove="@PaintMouse"
        @onmouseup="@StopPaint"
        @onmouseout="@StopPaint"
        @ref="@canvas"
        @ontouchstart="@StartPaintTouch"
        @ontouchmove="@PaintTouch"
        @ontouchend="@StopPaint" />



@code {

    ElementReference canvas;
    Canvas2DContext ctx;


    bool isPainting = false;
    double x;
    double y;
    WindowSize windowSize;

    public struct WindowSize
    {
        public long Height { get; set; }
        public long Width { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        windowSize = await JsRuntime.InvokeAsync<WindowSize>("getWindowSize");



        if (windowSize.Width > 500)
        {

            windowSize.Height = 500;
            windowSize.Width = 500;

        }
        else
        {
            windowSize.Width = (int)(windowSize.Width * 0.9);
            windowSize.Height = windowSize.Width;
        }
    }


    private void StartPaintMouse(MouseEventArgs e)
    {
        StartPainting(e.ClientX, e.ClientY);

    }

    private async Task PaintMouse(MouseEventArgs e)
    {
        await Start(e.ClientX, e.ClientY);

    }


    private void StartPaintTouch(TouchEventArgs e)
    {
        StartPainting(e.Touches.First().ClientX, e.Touches.First().ClientY);

    }
    private async Task Start(double pointx, double pointy)
    {


        if (isPainting)
        {
            var eX = pointx;
            var eY = pointy;
            if (ctx == null)
            {
                ctx = new Canvas2DContext(JsRuntime, canvas);
            }
            await ctx.DrawLine(x, y, eX, eY);
            x = eX;
            y = eY;
        }
    }
    private void StartPainting(double pointX, double pointY)
    {
        x = pointX;
        y = pointY;
        if (ctx == null)
        {
            ctx = new Canvas2DContext(JsRuntime, canvas);
        }
        isPainting = true;
    }

    private async Task PaintTouch(TouchEventArgs e)
    {
        await Start(e.Touches.First().ClientX, e.Touches.First().ClientY);


    }

    private void StopPaint()
    {
        isPainting = false;
    }


}