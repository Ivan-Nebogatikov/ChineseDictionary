@page "/flashcards"
@using ChineseDictionary.Models
@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary
@inject ChineseDictionary.Services.IFlashcardsService Flashcards
@using System.ComponentModel.DataAnnotations

@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject DbStore DbStore

<h1>Flashcards</h1>

@if (training == false)
{
    <EditForm Model="@input" OnValidSubmit="HandleTrainSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Number of words:
        <InputNumber id="WordsCount" @bind-Value="input.WordsCount" />

        <button type="submit">Train!</button>
    </EditForm>
}
else
{
    @if (word != null)
    {

        @foreach (string translate in translations)
        {
            <li>@translate</li>
        }

        <EditForm OnValidSubmit="HandleTrainSubmit">
            <button type="submit">Stop train</button>
        </EditForm>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}

<h1>Radio Button Group Test</h1>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @for (int i = 1; i <= 5; i++)
    {
        <label>
            <ChineseDictionary.Components.InputRadio name="rate" SelectedValue="i" @bind-Value="model.Rating"/>
            @i
        </label>
    }

    <button type="submit">Submit</button>
</EditForm>

<p>You chose: @model.Rating</p>

@code {

    bool training = false;
    private Model model = new Model();

    private InputFlashcardsModel input = new InputFlashcardsModel();
    ExtendedWord word;
    List<string> translations;

    protected override async Task OnInitializedAsync()
    {
        word = (await Dictionary.SearchByChineseAsync("", 0, 1)).First(); // mock word
    }

    private async void HandleTrainSubmit()
    {
        training = !training;
        if (training)
        {
            translations = Flashcards.GetRandomTranslations(word.Chinese, 4);
        }

    }

    private void HandleValidSubmit()
    {

    }

    public class Model
    {
        [Required]
        [Range(1, 5, ErrorMessage = "Words count should be in [1; 20]")]
        public int Rating { get; set; }
    }
}
