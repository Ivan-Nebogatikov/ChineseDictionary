@page "/flashcards"
@using ChineseDictionary.Models
@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary
@inject ChineseDictionary.Services.IFlashcardsService Flashcards
@using System.ComponentModel.DataAnnotations

@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject DbStore DbStore

<h1>Flashcards</h1>

@if (!training && !end)
{
    <EditForm Model="@input" OnValidSubmit="HandleTrainSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Number of words:
        <InputNumber id="WordsCount" @bind-Value="input.WordsCount" />
        <br>
        Group of flashcards:
        <InputNumber id="FlashcardsGroup" @bind-Value="group" />
        <button type="submit">Train!</button>
    </EditForm>
}
else
{
    @if (word != null)
    {

        <h4>@word.Chinese</h4>
        <EditForm Model="@model" OnValidSubmit="HandleCheckSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @foreach (string translate in optionTranslations)
            {
                <label>
                    <ChineseDictionary.Components.InputRadio name="translate" SelectedValue="@translate" @bind-Value="model.Translate" />
                    @translate
                </label>
                <br>
            }

            <button type="submit">Далее</button>
        </EditForm>

        <br />
        <EditForm OnValidSubmit="HandleStopSubmit">
            <button type="submit">Stop train</button>
        </EditForm>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}

@code {

    bool training = false;
    bool end = false;
    int group;
    private Model model = new Model();

    private InputFlashcardsModel input = new InputFlashcardsModel();
    ExtendedWord word;
    List<string> optionTranslations;
    List<ExtendedWord> correct;
    List<ExtendedWord> wrong;

    protected override async Task OnInitializedAsync()
    {
        word = (await Dictionary.SearchByChineseAsync("", 0, 1)).First(); // mock word
    }

    private async void HandleTrainSubmit()
    {
        training = !training;
        if (training)
        {
            optionTranslations = Flashcards.GetRandomTranslations(word.Chinese, 4);
        }

    }

    private void HandleStopSubmit()
    {
        training = false;
    }

    private void HandleCheckSubmit()
    {
        if (word.Translations.Contains(model.Translate))
            correct.Append(word);
        else
            wrong.Append(word);
    }

    public class Model
    {
        [Required]
        public string Translate { get; set; }
    }
}
