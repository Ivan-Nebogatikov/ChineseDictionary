@page "/flashcards"

@using ChineseDictionary.Models
@using ChineseDictionary.Constants
@using System.ComponentModel.DataAnnotations

@inject NavigationManager navigation
@inject ChineseDictionary.Services.IFlashcardsDbService FlashcardsDb
@inject ChineseDictionary.Services.IFlashcardsStatusService FlashcardsStatus
@inject Toolbelt.Blazor.I18nText.I18nText I18nText

<h1>@localization.Flashcards</h1>

<EditForm Model="@input" OnValidSubmit="HandleTrainSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @localization.NumberOfWords
    <InputNumber id="WordsCount" @bind-Value="input.WordsCount" />
    <br>
    @localization.GroupOfFlashcards
    <InputNumber id="FlashcardsGroup" @bind-Value="input.Group" />
    <br>
    <InputSelect @bind-Value="input.Type">
      
      <option value="">@localization.SelectTypeOfTrain</option>
      <option value="Options">@localization.FourOptions</option>
      <option value="Review">@localization.Review</option>
      <option value="Writting">@localization.Writting</option>

  </InputSelect>
    <button type="submit" class="btn-success btn-xs">@localization.Train</button>
</EditForm>

@code {

    private InputFlashcardsModel input = new InputFlashcardsModel();
    private Strings localization = new Strings();

    protected override async Task OnInitializedAsync()
    {
        localization = await I18nText.GetTextTableAsync<Strings>(this);
    }

    protected override void OnInitialized()
    {
        if (FlashcardsStatus.IsStateTrainingOptions())
            navigation.NavigateTo("flashcards/options");

        if (FlashcardsStatus.IsStateTrainingReview())
            navigation.NavigateTo("flashcards/review");

        if (FlashcardsStatus.IsStateTrainingWritting())
            navigation.NavigateTo("flashcards/writting");

        if (FlashcardsStatus.IsStateEnd())
            navigation.NavigateTo("flashcards/results");
    }

    // ToDo: Add message: loading train
    private async Task HandleTrainSubmit()
    {
        TrainItem[] trainData;

        if (input.Type == "Options")
        {
            trainData = await FlashcardsDb.GenerateTrainOptions(input.Group, input.WordsCount);
            FlashcardsStatus.BeginTrainOptions(trainData, input.Group, input.WordsCount);
            navigation.NavigateTo("flashcards/options");
        }

        if (input.Type == "Review")
        {
            trainData = await FlashcardsDb.GenerateTrainReview(input.Group, input.WordsCount);
            FlashcardsStatus.BeginTrainReview(trainData, input.Group, input.WordsCount);
            navigation.NavigateTo("flashcards/review");
        }

        if (input.Type == "Writting")
        {
            trainData = await FlashcardsDb.GenerateTrainWritting(input.Group, input.WordsCount);
            FlashcardsStatus.BeginTrainWritting(trainData, input.Group, input.WordsCount);
            navigation.NavigateTo("flashcards/writting");
        }
    }

    public class InputFlashcardsModel
    {
        [Required]
        [Range(1, 20, ErrorMessage = "Words count should be in [1; 20]")]
        public int WordsCount { get; set; } // Rewrite to select

        [Required]
        [Range(1, 20, ErrorMessage = "Group should be in [1; 20]")]
        public int Group { get; set; }

        [Required]
        public string Type { get; set; }
    }
}
