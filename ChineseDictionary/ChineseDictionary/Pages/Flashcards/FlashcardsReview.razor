@page "/flashcards/review"

@using ChineseDictionary.Models
@using System.ComponentModel.DataAnnotations

@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject NavigationManager navigation
@inject ChineseDictionary.Services.IFlashcardsStatusService FlashcardsStatus

<h1>@localization.Flashcards</h1>

@if (word != null)
{
    <h4>@word.Chinese</h4>

    <button @onclick="HandleRemember">@localization.Rremember</button>
    <br />
    <button @onclick="HandleNotRemember">@localization.DontRremember</button>
    <hr />
    <button @onclick="HandleStopSubmit">@localization.StopTrain</button>
}
else
{
    <p><em>@localization.Loading</em></p>
}

@code {

    Word word;
    private Model model = new Model();
    private Strings localization = new Strings();

    protected override async Task OnInitializedAsync()
    {
        localization = await I18nText.GetTextTableAsync<Strings>(this);
    }

    protected override void OnInitialized()
    {
        if (FlashcardsStatus.IsStateBegin())
            navigation.NavigateTo("flashcards");

        if (FlashcardsStatus.IsStateTrainingOptions())
            navigation.NavigateTo("flashcards/options");

        if (FlashcardsStatus.IsStateTrainingReview())
            word = FlashcardsStatus.GetWord();

        if (FlashcardsStatus.IsStateEnd())
            navigation.NavigateTo("flashcards/results");
    }

    private void HandleRemember()
    {
        FlashcardsStatus.Answer(true);
        if (FlashcardsStatus.IsStateTrainingReview())
            word = FlashcardsStatus.GetWord();
    }

    private void HandleNotRemember()
    {
        FlashcardsStatus.Answer(false);
        if (FlashcardsStatus.IsStateTrainingReview())
            word = FlashcardsStatus.GetWord();
    }

    private void HandleStopSubmit()
    {
        FlashcardsStatus.StopTrain();
    }

    // Maybe move & group with other models
    public class Model
    {
        [Required]
        public string Translate { get; set; }
    }
}
