@page "/flashcards/review"
@using ChineseDictionary.Models
@inject HttpClient Http
@inject ChineseDictionary.Services.IDictionaryServiceAsync Dictionary
@inject ChineseDictionary.Services.IFlashcardsDbService FlashcardsDb
@inject ChineseDictionary.Services.IFlashcardsStatusService FlashcardsStatus
@using System.ComponentModel.DataAnnotations

@using TG.Blazor.IndexedDB
@inject IndexedDBManager DbManager
@inject DbStore DbStore

<h1>Flashcards</h1>

@if (word != null)
{
    <h4>@word.Chinese</h4>

    <button @onclick="HandleRemember">Помню</button>
    <br />
    <button @onclick="HandleNotRemember">Не помню</button>
    <hr />
    <button @onclick="HandleStopSubmit">Stop train</button>
}
else
{
    <p><em>Loading...</em></p>
}

@code {

    int group;
    private Model model = new Model();
    FlashcardWord word;
    List<string> optionTranslations;

    protected override async Task OnInitializedAsync()
    {
        word = FlashcardsStatus.GetWord();
        optionTranslations = FlashcardsStatus.GetTranslations();
    }

    private async Task HandleRemember()
    {
        await FlashcardsStatus.AnswerReview(FlashcardsDb, true);
        word = FlashcardsStatus.GetWord();
    }

    private async Task HandleNotRemember()
    {
        await FlashcardsStatus.AnswerReview(FlashcardsDb, false);
        word = FlashcardsStatus.GetWord();
    }

    private void HandleStopSubmit()
    {
        FlashcardsStatus.StopTrain(FlashcardsDb);
    }

    // Maybe move & group with other models
    public class Model
    {
        [Required]
        public string Translate { get; set; }
    }
}
