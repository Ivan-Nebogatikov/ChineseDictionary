@page "/search/{text}"
@using ChineseDictionary.Models
@inject IJSRuntime JSRuntime;
@inject ChineseDictionary.Services.IDictionaryServiceAsync DictionaryService


<h1>@Text</h1>
<br />

@if (word is null)
{
    <em>Loading...</em>
}
else
{
    <h5>@word.Pinyin</h5>
    <br />
    <br />

    <h5>Translation:</h5>
    <ul>
        @foreach (string translation in word.Translations)
        {
            <li>@translation</li>
        }
    </ul>

    @if (word.Examples.Any())
    {
        <h5>Examples:</h5>
        <ul>
            @foreach (Example example in word.Examples)
            {
                <li>@example.Chinese<br /> @example.Translation</li>
            }
        </ul>
    }

    @if (word.RelativeWords.Any())
    {
        <h5>Relative words:</h5>
        <ul>
            @foreach (string relativeWord in word.RelativeWords)
            {
                <li><a href="search/@relativeWord"> @relativeWord </a></li>
            }
        </ul>
    }

    <div id="character-target-div"></div>
    <button id="animate-button">Animate</button>
    <br />
    <br />
    <h5><a href="/search">To Search</a></h5>

}
    
@code {

    [Parameter]
    public string Text { get; set; }

    private Word word;

    protected override async Task OnInitializedAsync()
    {
        word = await DictionaryService.GetByChinese(Text);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await JSRuntime.InvokeVoidAsync("removeListeners");
        }
        if (word != null)
        {
            foreach (char character in word.Chinese)
            {
                await JSRuntime.InvokeVoidAsync("characterDraw", character);
            }
        }
    }

}
